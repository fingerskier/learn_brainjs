// const net = new brain.NeuralNetwork({ hiddenLayer:[10,2]})
// const net = new brain.recurrent.RNN({ hiddenLayer:[10,2]})
const net = new brain.recurrent.LSTM({ hiddenLayer:[10,2]})

const data = [
    [0.007601003, 0.000014574, 0.509136971, 0.280660145, 0.003272479, 0.566527969],
    [0.007601003, 0.000014574, 0.509136971, 0.280776665, 0.003194441, 0.566027427],
    [0.007601003, 0.000014574, 0.509136971, 0.280718475, 0.003194441, 0.565610103],
    [0.007601003, 0.000014574, 0.509136971, 0.280718475, 0.003194441, 0.566027427],
    [0.007601003, 0.000014574, 0.509136971, 0.280660145, 0.003272479, 0.565777033],
    [0.007604496, 0.000014574, 0.509136971, 0.280776665, 0.003194441, 0.566277694],
    [0.007604496, 0.000014574, 0.509136971, 0.280718475, 0.003194441, 0.566611553],
    [0.007604496, 0.000014574, 0.509136971, 0.280660145, 0.003272479, 0.566110765],
    [0.007604496, 0.000014574, 0.509136971, 0.280776665, 0.003194441, 0.566027427],
    [0.007604496, 0.000014574, 0.509136971, 0.280776665, 0.003116631, 0.566527969],
    [0.007604496, 0.000014574, 0.509136971, 0.280718475, 0.003350316, 0.565943962],
    [0.007604496, 0.000014574, 0.509136971, 0.280776665, 0.003194441, 0.566361040],
    [0.007604496, 0.000014574, 0.509136971, 0.280718475, 0.003194441, 0.566444624],
    [0.007604496, 0.000014574, 0.509136971, 0.280718475, 0.003116631, 0.565610103],
    [0.918083122, 0.000014574, 0.509136971, 0.280893193, 0.003038592, 0.562189286],
    [0.918083122, 0.000014574, 0.509136971, 0.280776665, 0.003038592, 0.562356097],
    [0.918083122, 0.000014574, 0.509136971, 0.280834995, 0.002960782, 0.562272632],
    [0.918083122, 0.000014574, 0.509136971, 0.280893193, 0.003038592, 0.562189286],
    [0.918083122, 0.000014574, 0.509136971, 0.280893193, 0.003116631, 0.562272632],
    [0.918083122, 0.000014574, 0.509136971, 0.280951515, 0.003038592, 0.561938773],
    [0.918083122, 0.000014574, 0.509136971, 0.280834995, 0.003038592, 0.562272632],
    [0.918083122, 0.000014574, 0.509136971, 0.280893193, 0.003116631, 0.562272632],
    [0.918083122, 0.000014574, 0.509136971, 0.280893193, 0.002960782, 0.561938773],
    [0.918083122, 0.000014574, 0.509136971, 0.280951515, 0.003038592, 0.562189286],
    [0.918083122, 0.000014574, 0.509136971, 0.280893193, 0.003116631, 0.562522899],
]

let trainingData = [ ]

for (let I=0; I<data.length; ++I){
    trainingData.push({ input: data[I], output: data[I] })
}

let model = window.localStorage.getItem('autoenc_model')

// if (model) net.fromJSON(JSON.parse(model))

net.train(trainingData, {
  log: (stats)=>console.log(stats),
  logPeriod: 1000,
  learningRate: 0.1,
})

evaluate(Math.floor(Math.random()*data.length))
evaluate(Math.floor(Math.random()*data.length))

function evaluate(I) {
    let flarn = data[I]
    let thisn = net.run(data[I])

    for (let X in data[I]) {
        console.log(`${flarn[X]} vs ${thisn[X]}`)
    }
}

window.localStorage.setItem('autoenc_model', JSON.stringify(net.toJSON()))

// window.onload = ()=>{
//   var content = document.getElementById('content')
  
//   content.innerText = `
//     net.run(inputs[0]) >> ${net.run(inputs[0])}
//     net.run(inputs[1]) >> ${net.run(inputs[1])}
//     net.run(inputs[2]) >> ${net.run(inputs[2])}
//     net.run(inputs[3]) >> ${net.run(inputs[3])}
//   `
// }